Bugzilla: 696821
Upstream-status: Sent http://marc.info/?l=linux-kernel&m=139835974112096&w=2

On 64-bit systems, O_LARGEFILE is automatically added to flags inside
the open() syscall (also openat(), blkdev_open(), etc).
Userspace therefore defines O_LARGEFILE to be 0 - you can use it,
but it's a no-op. Everything should be O_LARGEFILE by default.

But: when fanotify does create_fd() it uses dentry_open(), which skips
all that. And userspace can't set O_LARGEFILE in fanotify_init() because
it's defined to 0. So if fanotify gets an event regarding a large file,
the read() will just fail with -EOVERFLOW.

This patch adds O_LARGEFILE to fanotify_init()'s event_f_flags on 64-bit
systems, using the same test as open()/openat()/etc.

Resolves: https://bugzilla.redhat.com/show_bug.cgi?id=696821

Acked-by: Eric Paris <eparis@redhat.com>
Signed-off-by: Will Woods <wwoods@redhat.com>

--- linux-3.14.1-200.fc20.x86_64/fs/notify/fanotify/fanotify_user.c.orig	2014-04-23 18:15:29.347644932 -0400
+++ linux-3.14.1-200.fc20.x86_64/fs/notify/fanotify/fanotify_user.c	2014-04-23 18:17:44.249438484 -0400
@@ -742,6 +742,8 @@
 	oevent->path.mnt = NULL;
 	oevent->path.dentry = NULL;
 
+	if (force_o_largefile())
+		event_f_flags |= O_LARGEFILE;
 	group->fanotify_data.f_flags = event_f_flags;
 #ifdef CONFIG_FANOTIFY_ACCESS_PERMISSIONS
 	oevent->response = 0;
